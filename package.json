{
  "name": "@elchika-inc/js-qrcode",
  "version": "1.0.0",
  "description": "Pure JavaScript QR code library optimized for Workers and SSR environments",
  "type": "module",
  "main": "dist/js-qrcode.js",
  "module": "src/index.js",
  "types": "types/index.d.ts",
  "files": [
    "dist/",
    "src/",
    "types/",
    "README.md",
    "LICENSE"
  ],
  "scripts": {
    "build": "rollup -c",
    "dev": "rollup -c -w",
    "test": "jest",
    "test:watch": "jest --watch",
    "lint": "eslint src/**/*.js",
    "format": "prettier --write src/**/*.js",
    "prepare": "npm run build",
    "preversion": "npm test && npm run lint",
    "version": "npm run build && git add -A dist",
    "postversion": "git push && git push --tags",
    "wasm:check": "command -v emcc >/dev/null 2>&1 || (echo 'Error: Emscripten not found. Please install:' && echo 'git clone https://github.com/emscripten-core/emsdk.git' && echo 'cd emsdk && ./emsdk install latest && ./emsdk activate latest' && echo 'source ./emsdk_env.sh' && exit 1)",
    "wasm:setup": "git clone https://github.com/emscripten-core/emsdk.git ~/emsdk || true && cd ~/emsdk && ./emsdk install latest && ./emsdk activate latest && echo 'Run: source ~/emsdk/emsdk_env.sh'",
    "wasm:build": "npm run wasm:check && cd wasm && source ~/emsdk/emsdk_env.sh && ./build.sh",
    "wasm:build:reed-solomon": "npm run wasm:check && cd wasm && source ~/emsdk/emsdk_env.sh && ./build.sh reed_solomon",
    "wasm:build:masking": "npm run wasm:check && cd wasm && source ~/emsdk/emsdk_env.sh && ./build.sh masking",
    "wasm:build:data-encoder": "npm run wasm:check && cd wasm && source ~/emsdk/emsdk_env.sh && ./build.sh data_encoder",
    "wasm:clean": "rm -rf src/wasm/*.js src/wasm/*.d.ts",
    "wasm:test": "npm run wasm:build && npm test -- --testPathPattern=wasm-integration",
    "wasm:test:reed-solomon": "npm run wasm:build:reed-solomon && npm test -- --testPathPattern=wasm-integration",
    "wasm:test:masking": "npm run wasm:build:masking && npm test -- --testPathPattern=masking-wasm-integration",
    "wasm:test:data-encoder": "npm run wasm:build:data-encoder && npm test -- --testPathPattern=data-encoder-wasm-integration",
    "wasm:benchmark": "npm run wasm:build && node -e \"import('./src/generator.js').then(async ({ QRCodeGenerator }) => { const testData = 'Benchmark Test Data'; const wasmGen = new QRCodeGenerator(); const jsGen = new QRCodeGenerator(undefined, undefined, { forceJS: true }); const start1 = performance.now(); await wasmGen.generate(testData); const wasmTime = performance.now() - start1; const start2 = performance.now(); await jsGen.generate(testData); const jsTime = performance.now() - start2; console.log(\\`WASM: \\${wasmTime.toFixed(2)}ms, JS: \\${jsTime.toFixed(2)}ms\\`); console.log(\\`改善率: \\${((jsTime-wasmTime)/jsTime*100).toFixed(1)}%\\`); });\""
  },
  "keywords": [
    "qrcode",
    "qr-code",
    "workers",
    "cloudflare",
    "vercel",
    "edge-runtime",
    "ssr",
    "svg",
    "generator",
    "scanner",
    "decoder",
    "pure-javascript",
    "webassembly",
    "wasm",
    "emscripten",
    "performance",
    "optimization",
    "reed-solomon",
    "error-correction"
  ],
  "author": "Elchika Inc.",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/elchika-inc/workers-qrcode.git"
  },
  "bugs": {
    "url": "https://github.com/elchika-inc/workers-qrcode/issues"
  },
  "homepage": "https://github.com/elchika-inc/workers-qrcode#readme",
  "devDependencies": {
    "@babel/core": "^7.28.0",
    "@babel/preset-env": "^7.28.0",
    "@rollup/plugin-commonjs": "^25.0.0",
    "@rollup/plugin-node-resolve": "^15.0.0",
    "@rollup/plugin-terser": "^0.4.0",
    "babel-jest": "^29.7.0",
    "eslint": "^8.50.0",
    "jest": "^29.0.0",
    "jest-environment-jsdom": "^29.0.0",
    "prettier": "^3.0.0",
    "rollup": "^3.0.0"
  },
  "jest": {
    "testEnvironment": "jsdom",
    "testMatch": [
      "**/tests/**/*.test.js"
    ],
    "setupFilesAfterEnv": [
      "<rootDir>/tests/setup.js"
    ],
    "transform": {
      "^.+\\.js$": "babel-jest"
    },
    "collectCoverageFrom": [
      "src/**/*.js",
      "!src/index.js"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 55,
        "functions": 70,
        "lines": 65,
        "statements": 65
      }
    }
  },
  "exports": {
    ".": {
      "import": "./src/index.js",
      "require": "./dist/js-qrcode.js"
    }
  },
  "dependencies": {
    "qr.js": "^0.0.0",
    "qrcode": "^1.5.4",
    "qrcode-generator": "^2.0.2"
  }
}
